# -*- coding: utf-8 -*-
"""Content Base Filtering (Search).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DiXDoTJNx4VNPCnHgHEuW9mo_WPBRki0
"""

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from nltk.tokenize import word_tokenize
import nltk
nltk.download('punkt_tab')

"""**Model for making recommendations**"""

class RecommenderSystem:
    def __init__(self, data, content_col, place_col, category_col, rating_col, address_col):
        self.df = pd.read_excel(data)
        self.content_col = content_col
        self.place_col = place_col
        self.category_col = category_col
        self.rating_col = rating_col
        self.address_col = address_col
        self.encoder = None
        self.bank = None

    def fit(self):
        self.encoder = CountVectorizer(stop_words='english', tokenizer=word_tokenize)
        self.bank = self.encoder.fit_transform(self.df[self.content_col].fillna(""))

    def recommend(self, place_name, topk=10):
        idx = self.df[self.df[self.place_col] == place_name].index[0]
        content = self.df.loc[idx, self.content_col]
        code = self.encoder.transform([content])
        dist = cosine_similarity(code, self.bank)
        rec_idx = dist.argsort()[0, -topk-1:-1][::-1]
        rec_idx = [i for i in rec_idx if i != idx]
        recommendations = self.df.iloc[rec_idx][[self.place_col, self.category_col, self.rating_col, self.address_col, self.content_col]]
        recommendations = recommendations.sort_values(by=self.rating_col, ascending=False)
        return recommendations

recommender = RecommenderSystem(data='namafilenya.xlsx',
                                content_col='Metadata',
                                place_col='Place',
                                category_col='Category',
                                rating_col="Rating",
                                address_col="Address")
recommender.fit()
recommendations = recommender.recommend('Dago Dreampark', topk=10)
print(recommendations.to_string(index=False))
