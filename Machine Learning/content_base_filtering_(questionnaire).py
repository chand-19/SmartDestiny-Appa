# -*- coding: utf-8 -*-
"""Content Base Filtering (Questionnaire).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MCX_u6cFIuLFUvs2H9DqiLZPscKjjqQ5
"""

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from nltk.tokenize import word_tokenize
import nltk

class RecommenderSystem:
    def __init__(self, data, content_col, place_col, city_col, category_col, rating_col, price_col, distance_col):
        self.df = pd.read_excel(data)
        self.content_col = content_col
        self.place_col = place_col
        self.city_col = city_col
        self.category_col = category_col
        self.rating_col = rating_col
        self.price_col = price_col
        self.distance_col = distance_col
        self.encoder = None
        self.bank = None

    def fit(self):
        self.encoder = CountVectorizer(stop_words='english', tokenizer=word_tokenize)
        self.bank = self.encoder.fit_transform(self.df[self.content_col].fillna(""))

    def recommend(self, category=None, max_distance=None, max_price=None, topk=10):
        filtered_df = self.df
        if category:
            filtered_df = filtered_df[filtered_df[self.category_col] == category]
        if max_distance is not None:
            filtered_df = filtered_df[filtered_df[self.distance_col] <= max_distance]
        if max_price is not None:
            filtered_df = filtered_df[filtered_df[self.price_col] <= max_price]

        content_matrix = self.encoder.transform(filtered_df[self.content_col].fillna(""))
        dist = cosine_similarity(content_matrix, self.bank)

        rec_idx = dist.argsort(axis=1)[:, -topk:][:, ::-1].flatten()
        rec_idx = list(dict.fromkeys(rec_idx))

        recommendations = self.df.iloc[rec_idx][[self.place_col, self.city_col, self.category_col, self.rating_col, self.content_col]]
        recommendations = recommendations.sort_values(by=self.rating_col, ascending=False).head(topk)
        return recommendations

recommender = RecommenderSystem(data='dataset.xlsx',
                                content_col='description',
                                place_col='place_name',
                                city_col='city',
                                category_col='category',
                                rating_col='rating',
                                price_col='price',
                                distance_col='distance')
recommender.fit()
recommendations = recommender.recommend('Nature','100 km-500 km','luxury', topk=50)
print(recommendations.to_string(index=False))